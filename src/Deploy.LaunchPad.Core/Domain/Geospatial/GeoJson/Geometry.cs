// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// using the json schema found here: https://geojson.org/schema/Geometry.json
// 

namespace Deploy.LaunchPad.Core.GeoJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Geometry
    {
        [JsonProperty("bbox", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<double> Bbox { get; set; }

        [JsonProperty("coordinates", Required = Required.Always)]
        public virtual List<GeometryCoordinate> Coordinates { get; set; }

        [JsonProperty("type", Required = Required.Always)]
        public virtual GeometryType Type { get; set; }
    }

    public partial struct GeometryCoordinate
    {
        public List<FluffyCoordinate> AnythingArray;
        public double? Double;

        public static implicit operator GeometryCoordinate(List<FluffyCoordinate> AnythingArray) => new GeometryCoordinate { AnythingArray = AnythingArray };
        public static implicit operator GeometryCoordinate(double Double) => new GeometryCoordinate { Double = Double };
    }

    public partial class Geometry
    {
        public static Geometry FromJson(string json) => JsonConvert.DeserializeObject<Geometry>(json, Deploy.LaunchPad.Core.GeoJson.GeometryConverter.Settings);
    }

    public static class SerializeGeometry
    {
        public static string ToJson(this Geometry self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.GeoJson.GeometryConverter.Settings);
    }

    internal static class GeometryConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GeometryCoordinateConverter.Singleton,
                FluffyCoordinateConverter.Singleton,
                PurpleCoordinateConverter.Singleton,
                GeometryTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GeometryCoordinateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeometryCoordinate) || t == typeof(GeometryCoordinate?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new GeometryCoordinate { Double = doubleValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<FluffyCoordinate>>(reader);
                    return new GeometryCoordinate { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type GeometryCoordinate");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (GeometryCoordinate)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            throw new Exception("Cannot marshal type GeometryCoordinate");
        }

        public static readonly GeometryCoordinateConverter Singleton = new GeometryCoordinateConverter();
    }

}
