// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// using the json schema found here: https://geojson.org/schema/GeoJSON.json
// 
namespace Deploy.LaunchPad.Core.GeoJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GeoJsonDefinition : ICanBeDescribedInGeoJson
    {
        [JsonProperty("bbox", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<double> Bbox { get; set; }

        [JsonProperty("coordinates", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<Geometry> Coordinates { get; set; }

        [JsonProperty("type", Required = Required.Always)]
        public virtual GeoJsonType Type { get; set; }

        [JsonProperty("geometries", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<Geometry> Geometries { get; set; }

        [JsonProperty("geometry")]
        public virtual Feature Geometry { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual GeoJsonId? Id { get; set; }

        [JsonProperty("properties")]
        public virtual Dictionary<string, Geometry> Properties { get; set; }

        [JsonProperty("features", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<Feature> Features { get; set; }
    }

    public enum GeoJsonType { Feature, FeatureCollection, GeometryCollection, LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon };


    public partial class GeoJsonDefinition
    {
        public static GeoJsonDefinition FromJson(string json) => JsonConvert.DeserializeObject<GeoJsonDefinition>(json, Deploy.LaunchPad.Core.GeoJson.GeoJsonConverter.Settings);
    }

    public static class SerializeGeoJson
    {
        public static string ToJson(this GeoJsonDefinition self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.GeoJson.GeoJsonConverter.Settings);
    }

    internal static class GeoJsonConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FluffyCoordinateConverter.Singleton,
                PurpleCoordinateConverter.Singleton,
                GeometryTypeConverter.Singleton,
                GeoJsonPointTypeConverter.Singleton,
                GeoJsonIdConverter.Singleton,
                FeatureTypeConverter.Singleton,
                GeoJsonTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GeoJsonTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeoJsonType) || t == typeof(GeoJsonType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Feature":
                    return GeoJsonType.Feature;
                case "FeatureCollection":
                    return GeoJsonType.FeatureCollection;
                case "GeometryCollection":
                    return GeoJsonType.GeometryCollection;
                case "LineString":
                    return GeoJsonType.LineString;
                case "MultiLineString":
                    return GeoJsonType.MultiLineString;
                case "MultiPoint":
                    return GeoJsonType.MultiPoint;
                case "MultiPolygon":
                    return GeoJsonType.MultiPolygon;
                case "Point":
                    return GeoJsonType.Point;
                case "Polygon":
                    return GeoJsonType.Polygon;
            }
            throw new Exception("Cannot unmarshal type GeoJsonType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GeoJsonType)untypedValue;
            switch (value)
            {
                case GeoJsonType.Feature:
                    serializer.Serialize(writer, "Feature");
                    return;
                case GeoJsonType.FeatureCollection:
                    serializer.Serialize(writer, "FeatureCollection");
                    return;
                case GeoJsonType.GeometryCollection:
                    serializer.Serialize(writer, "GeometryCollection");
                    return;
                case GeoJsonType.LineString:
                    serializer.Serialize(writer, "LineString");
                    return;
                case GeoJsonType.MultiLineString:
                    serializer.Serialize(writer, "MultiLineString");
                    return;
                case GeoJsonType.MultiPoint:
                    serializer.Serialize(writer, "MultiPoint");
                    return;
                case GeoJsonType.MultiPolygon:
                    serializer.Serialize(writer, "MultiPolygon");
                    return;
                case GeoJsonType.Point:
                    serializer.Serialize(writer, "Point");
                    return;
                case GeoJsonType.Polygon:
                    serializer.Serialize(writer, "Polygon");
                    return;
            }
            throw new Exception("Cannot marshal type GeoJsonType");
        }

        public static readonly GeoJsonTypeConverter Singleton = new GeoJsonTypeConverter();
    }
}
