// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// using the json schema found here: https://geojson.org/schema/Feature.json
// 
namespace Deploy.LaunchPad.Core.GeoJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Feature
    {
        [JsonProperty("bbox", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<double> Bbox { get; set; }

        [JsonProperty("geometry", Required = Required.AllowNull)]
        public virtual GeoJsonDefinition Geometry { get; set; }

        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public virtual GeoJsonId? Id { get; set; }

        [JsonProperty("properties", Required = Required.AllowNull)]
        public virtual Dictionary<string, dynamic> Properties { get; set; }

        [JsonProperty("type", Required = Required.Always)]
        public virtual FeatureType Type { get; set; }
    }

    public enum GeoJsonPointType { GeometryCollection, LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon };

    public enum FeatureType { Feature };


    public partial class Feature
    {
        public static Feature FromJson(string json) => JsonConvert.DeserializeObject<Feature>(json, Deploy.LaunchPad.Core.GeoJson.FeatureConverter.Settings);
    }

    public static class SerializeFeature
    {
        public static string ToJson(this Feature self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.GeoJson.FeatureConverter.Settings);
    }

    internal static class FeatureConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GeoJsonPointCoordinateConverter.Singleton,
                FluffyCoordinateConverter.Singleton,
                PurpleCoordinateConverter.Singleton,
                GeometryTypeConverter.Singleton,
                GeoJsonPointTypeConverter.Singleton,
                GeoJsonIdConverter.Singleton,
                FeatureTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
