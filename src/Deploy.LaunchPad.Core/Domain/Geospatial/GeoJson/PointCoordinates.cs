// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// using the json schema found here: https://geojson.org/schema/PointCoordinates.json
// 

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson
{
    public partial struct PointCoordinates
    {
        public List<FluffyCoordinate> AnythingArray;
        public double? Double;

        public static implicit operator PointCoordinates(List<FluffyCoordinate> AnythingArray) => new PointCoordinates { AnythingArray = AnythingArray };
        public static implicit operator PointCoordinates(double Double) => new PointCoordinates { Double = Double };
    }

    internal class GeoJsonPointCoordinateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PointCoordinates) || t == typeof(PointCoordinates?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new PointCoordinates { Double = doubleValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<FluffyCoordinate>>(reader);
                    return new PointCoordinates { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type GeoJsonPointCoordinate");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PointCoordinates)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            throw new Exception("Cannot marshal type GeoJsonPointCoordinate");
        }

        public static readonly GeoJsonPointCoordinateConverter Singleton = new GeoJsonPointCoordinateConverter();
    }

}
