// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// using the json schema found here: https://geojson.org/schema/Point.json
// 

namespace Deploy.LaunchPad.Core.GeoJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson.Geometries;
    using Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson.Types;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [Serializable]
    public partial class Point : GeoJsonGeometryTypeBase
    {

        [JsonProperty("coordinates", Required = Required.Always)]
        public virtual List<double> Coordinates { get; set; }

        [JsonProperty("type", Required = Required.Always)]
        public virtual GeoJsonType Type { get; set; }= GeoJsonType.Point;

        public Point() : base()
        {

        }

        public static Point FromJson(string json) => JsonConvert.DeserializeObject<Point>(json, Deploy.LaunchPad.Core.GeoJson.PointConverter.Settings);
    }


    public static class SerializePoint
    {
        public static string ToJson(this Point self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.GeoJson.PointConverter.Settings);
    }

    internal static class PointConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GeoJsonTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
