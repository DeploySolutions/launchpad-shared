// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// 

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson
{
    public partial struct GeoJsonId
    {
        public double? Double;
        public string String;

        public static implicit operator GeoJsonId(double Double) => new GeoJsonId { Double = Double };
        public static implicit operator GeoJsonId(string String) => new GeoJsonId { String = String };
    }
    internal class GeoJsonIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeoJsonId) || t == typeof(GeoJsonId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new GeoJsonId { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new GeoJsonId { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type GeoJsonId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (GeoJsonId)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type GeoJsonId");
        }

        public static readonly GeoJsonIdConverter Singleton = new GeoJsonIdConverter();
    }
}
