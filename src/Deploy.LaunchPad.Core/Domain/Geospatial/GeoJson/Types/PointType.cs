// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// 

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson.Types
{
    public enum PointType 
    { 
        GeometryCollection = 0, 
        LineString =1, 
        MultiLineString = 2, 
        MultiPoint = 3, 
        MultiPolygon = 4, 
        Point =5, 
        Polygon = 6
    };
    internal class GeoJsonPointTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PointType) || t == typeof(PointType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "GeometryCollection":
                    return PointType.GeometryCollection;
                case "LineString":
                    return PointType.LineString;
                case "MultiLineString":
                    return PointType.MultiLineString;
                case "MultiPoint":
                    return PointType.MultiPoint;
                case "MultiPolygon":
                    return PointType.MultiPolygon;
                case "Point":
                    return PointType.Point;
                case "Polygon":
                    return PointType.Polygon;
            }
            throw new Exception("Cannot unmarshal type GeoJsonPointType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PointType)untypedValue;
            switch (value)
            {
                case PointType.GeometryCollection:
                    serializer.Serialize(writer, "GeometryCollection");
                    return;
                case PointType.LineString:
                    serializer.Serialize(writer, "LineString");
                    return;
                case PointType.MultiLineString:
                    serializer.Serialize(writer, "MultiLineString");
                    return;
                case PointType.MultiPoint:
                    serializer.Serialize(writer, "MultiPoint");
                    return;
                case PointType.MultiPolygon:
                    serializer.Serialize(writer, "MultiPolygon");
                    return;
                case PointType.Point:
                    serializer.Serialize(writer, "Point");
                    return;
                case PointType.Polygon:
                    serializer.Serialize(writer, "Polygon");
                    return;
            }
            throw new Exception("Cannot marshal type GeoJsonPointType");
        }

        public static readonly GeoJsonPointTypeConverter Singleton = new GeoJsonPointTypeConverter();
    }
}
