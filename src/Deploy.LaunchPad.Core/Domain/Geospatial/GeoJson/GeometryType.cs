// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// 

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deploy.LaunchPad.Core.Domain.Geospatial.GeoJson
{
    public enum GeometryType { 
        LineString = 0, 
        MultiLineString =1, 
        MultiPoint=2, 
        MultiPolygon = 3, 
        Point = 4, 
        Polygon =5
    };

    internal class GeometryTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeometryType) || t == typeof(GeometryType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LineString":
                    return GeometryType.LineString;
                case "MultiLineString":
                    return GeometryType.MultiLineString;
                case "MultiPoint":
                    return GeometryType.MultiPoint;
                case "MultiPolygon":
                    return GeometryType.MultiPolygon;
                case "Point":
                    return GeometryType.Point;
                case "Polygon":
                    return GeometryType.Polygon;
            }
            throw new Exception("Cannot unmarshal type GeometryType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GeometryType)untypedValue;
            switch (value)
            {
                case GeometryType.LineString:
                    serializer.Serialize(writer, "LineString");
                    return;
                case GeometryType.MultiLineString:
                    serializer.Serialize(writer, "MultiLineString");
                    return;
                case GeometryType.MultiPoint:
                    serializer.Serialize(writer, "MultiPoint");
                    return;
                case GeometryType.MultiPolygon:
                    serializer.Serialize(writer, "MultiPolygon");
                    return;
                case GeometryType.Point:
                    serializer.Serialize(writer, "Point");
                    return;
                case GeometryType.Polygon:
                    serializer.Serialize(writer, "Polygon");
                    return;
            }
            throw new Exception("Cannot marshal type GeometryType");
        }

        public static readonly GeometryTypeConverter Singleton = new GeometryTypeConverter();
    }
}
