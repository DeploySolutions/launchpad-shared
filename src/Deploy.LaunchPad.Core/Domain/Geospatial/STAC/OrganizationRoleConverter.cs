// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
//
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deploy.LaunchPad.Core.Domain.Geography.STAC
{
    internal class OrganizationRoleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OrganizationRole) || t == typeof(OrganizationRole?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "host":
                    return OrganizationRole.Host;
                case "licensor":
                    return OrganizationRole.Licensor;
                case "processor":
                    return OrganizationRole.Processor;
                case "producer":
                    return OrganizationRole.Producer;
            }
            throw new Exception("Cannot unmarshal type OrganizationRole");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OrganizationRole)untypedValue;
            switch (value)
            {
                case OrganizationRole.Host:
                    serializer.Serialize(writer, "host");
                    return;
                case OrganizationRole.Licensor:
                    serializer.Serialize(writer, "licensor");
                    return;
                case OrganizationRole.Processor:
                    serializer.Serialize(writer, "processor");
                    return;
                case OrganizationRole.Producer:
                    serializer.Serialize(writer, "producer");
                    return;
            }
            throw new Exception("Cannot marshal type OrganizationRole");
        }

        public static readonly OrganizationRoleConverter Singleton = new OrganizationRoleConverter();
    }

}
