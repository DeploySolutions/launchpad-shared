// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// 

namespace Deploy.LaunchPad.Core.STAC
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class StacDateTime
    {
        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? Created { get; set; }

        /// <summary>
        /// The searchable date/time of the assets, in UTC (Formatted in RFC 3339)
        /// </summary>
        [JsonProperty("datetime")]
        public virtual DateTimeOffset? Datetime { get; set; }

        /// <summary>
        /// The searchable end date/time of the assets, in UTC (Formatted in RFC 3339)
        /// </summary>
        [JsonProperty("end_datetime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? EndDatetime { get; set; }

        /// <summary>
        /// The searchable start date/time of the assets, in UTC (Formatted in RFC 3339)
        /// </summary>
        [JsonProperty("start_datetime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? StartDatetime { get; set; }

        [JsonProperty("updated", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? Updated { get; set; }
    }

    public partial class StacDateTime
    {
        public static StacDateTime FromJson(string json) => JsonConvert.DeserializeObject<StacDateTime>(json, Deploy.LaunchPad.Core.STAC.StacDateTimeConverter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this StacDateTime self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.STAC.StacDateTimeConverter.Settings);
    }

    internal static class StacDateTimeConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
