// Initially generated by quicktype https://github.com/quicktype/quicktype under the Apache 2 license.
// 

namespace Deploy.LaunchPad.Core.STAC
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Deploy.LaunchPad.Core.Geospatial.STAC;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class StacProvider
    {
        [JsonProperty("providers", NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<Provider> Providers { get; set; }
    }

    public partial class Provider
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Description { get; set; }

        [JsonProperty("name")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }

        [JsonProperty("roles", NullValueHandling = NullValueHandling.Ignore)]
        public virtual List<OrganizationRole> Roles { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Url { get; set; }
    }

    public partial class StacProvider
    {
        public static StacProvider FromJson(string json) => JsonConvert.DeserializeObject<StacProvider>(json, Deploy.LaunchPad.Core.STAC.StacProviderConverter.Settings);
    }

    public static class SerializeStacProvider
    {
        public static string ToJson(this StacProvider self) => JsonConvert.SerializeObject(self, Deploy.LaunchPad.Core.STAC.StacProviderConverter.Settings);
    }

    internal static class StacProviderConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OrganizationRoleConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }


}
