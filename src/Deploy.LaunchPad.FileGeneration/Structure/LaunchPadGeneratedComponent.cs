// ***********************************************************************
// Assembly         : Deploy.LaunchPad.FileGeneration
// Author           : Nicholas Kellett
// Created          : 11-19-2023
//
// Last Modified By : Nicholas Kellett
// Last Modified On : 11-07-2023
// ***********************************************************************
// <copyright file="LaunchPadGeneratedComponent.cs" company="Deploy Software Solutions, inc.">
//     2018-2023 Deploy Software Solutions, inc.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Castle.Core.Logging;
using Deploy.LaunchPad.FileGeneration.Stages;
using System;
using System.Collections.Generic;

namespace Deploy.LaunchPad.FileGeneration.Structure
{
    /// <summary>
    /// Represents a component generated by LaunchPad Framework.
    /// </summary>
    /// <typeparam name="TBlueprintDefinitionSettings">The type of the t blueprint definition settings.</typeparam>
    /// <typeparam name="TBlueprintDefinitionInstructions">The type of the t blueprint definition instructions.</typeparam>
    [Serializable]
    public partial class LaunchPadGeneratedComponent<TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions>
        : LaunchPadGeneratedObjectBase, ILaunchPadGeneratedComponent<TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions>
        where TBlueprintDefinitionSettings : LaunchPadGeneratedObjectBlueprintDefinitionSettings, new()
        where TBlueprintDefinitionInstructions : LaunchPadGeneratedObjectBlueprintDefinitionInstructionsBase, new()
    {
        /// <summary>
        /// Gets or sets the blueprint definition.
        /// </summary>
        /// <value>The blueprint definition.</value>
        public virtual LaunchPadGeneratedObjectBlueprintDefinition<TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions> BlueprintDefinition { get; set; }

        /// <summary>
        /// Gets or sets the licensed third party items.
        /// </summary>
        /// <value>The licensed third party items.</value>
        public virtual IDictionary<string, ILicensedThirdPartySoftwareItem> LicensedThirdPartyItems { get; set; }

        /// <summary>
        /// Gets or sets the component status.
        /// </summary>
        /// <value>The component status.</value>
        public virtual ComponentStatusEnum ComponentStatus { get; set; }


        /// <summary>
        /// Contains a dictionary of secret vault names and identifiers which will be used to populate appSettings.json file
        /// </summary>
        /// <value>The secret vaults.</value>
        public virtual IDictionary<string, string> SecretVaults { get; set; }

        /// <summary>
        /// Gets or sets the logger.
        /// </summary>
        /// <value>The logger.</value>
        public virtual ILogger Logger { get; set; }

        /// <summary>
        /// Returns a bool indicating if the component is currently in a valid or invalid state.
        /// </summary>
        /// <returns>True if the component is in a valid state, or false if it is contains missing or invalid elements.</returns>
        public virtual bool CheckValidity()
        {
            bool isValid = false;
            if (BlueprintDefinition != null
                && !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Id.ToString()) && !string.IsNullOrEmpty(Inheritance.FullyQualifiedType)
            )
            {
                isValid = true;
            }
            return isValid;
        }

        /// <summary>
        /// Assemble the component from the provided input.
        /// </summary>
        /// <typeparam name="TAssembleInput">The type of the t assemble input.</typeparam>
        /// <typeparam name="TAssembleOutput">The type of the t assemble output.</typeparam>
        /// <typeparam name="TGeneratedObject">The type of the t generated object.</typeparam>
        /// <param name="input">The input.</param>
        /// <returns>TAssembleOutput.</returns>
        /// <exception cref="System.NotImplementedException"></exception>
        public virtual TAssembleOutput AssembleComponent<TAssembleInput, TAssembleOutput, TGeneratedObject>(TAssembleInput input)
            where TAssembleInput : AssembleComponentInputBase<TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions>, new()
            where TAssembleOutput : AssembleComponentOutputBase, new()
            where TGeneratedObject : LaunchPadGeneratedSolution, new()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchPadGeneratedComponent{TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions}"/> class.
        /// </summary>
        /// <param name="logger">The logger.</param>
        public LaunchPadGeneratedComponent(ILogger logger) : base()
        {
            Logger = logger;
            BlueprintDefinition = new LaunchPadGeneratedObjectBlueprintDefinition<TBlueprintDefinitionSettings, TBlueprintDefinitionInstructions>();
            var comparer = StringComparer.OrdinalIgnoreCase;
            LicensedThirdPartyItems = new Dictionary<string, ILicensedThirdPartySoftwareItem>(comparer);
            SecretVaults = new Dictionary<string, string>(comparer);
            ComponentStatus = ComponentStatusEnum.Enabled;
        }
    }
}
